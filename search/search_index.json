{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"next-cvat","text":"<p>A Python library for interacting with CVAT (Computer Vision Annotation Tool).</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install next-cvat\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from next_cvat import Client\n\n# Initialize client from environment variables\nclient = Client.from_env_file(\".env.cvat.secrets\")\n\n# Get a project\nproject = client.project(217969)\n\n# Download project data\nproject.download_(\"dataset/\")\n\n# Load annotations\nfrom next_cvat import Annotations\nannotations = Annotations.from_path(\"dataset/annotations.xml\")\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy-to-use Python interface for CVAT</li> <li>Support for projects, tasks, jobs, and annotations</li> <li>Download and upload functionality</li> <li>Mask annotation support</li> <li>Job status tracking</li> <li>Comprehensive type hints and documentation</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#annotations","title":"Annotations","text":"<p>The <code>Annotations</code> class provides functionality to load, save and query CVAT annotations:</p> <pre><code># Load annotations from XML file\nannotations = Annotations.from_path(\"annotations.xml\")\n\n# Load annotations with job status\nannotations = Annotations.from_path(\n    \"annotations.xml\",\n    \"job_status.json\"\n)\n\n# Get completed tasks and their images\ncompleted_tasks = annotations.get_completed_tasks()\ncompleted_images = annotations.get_images_from_completed_tasks()\n\n# Get task status\ntask_status = annotations.get_task_status(\"1234\")\n# Returns: {\"5678\": \"completed\", \"5679\": \"in_progress\"}\n\n# Create CVAT link for an image\nlink = annotations.create_cvat_link(\"image1.jpg\")\n# Returns: \"https://app.cvat.ai/tasks/453747/jobs/520016\"\n</code></pre>"},{"location":"#project","title":"Project","text":"<p>The <code>Project</code> class represents a CVAT project:</p> <pre><code>project = Project(\n    id=\"217969\",\n    name=\"My Project\",\n    created=\"2024-01-01 12:00:00.000000+00:00\",\n    updated=\"2024-01-01 12:00:00.000000+00:00\",\n    labels=[\n        Label(name=\"car\", color=\"#ff0000\", type=\"any\"),\n        Label(name=\"person\", color=\"#00ff00\", type=\"any\")\n    ]\n)\n</code></pre>"},{"location":"#task","title":"Task","text":"<p>The <code>Task</code> class represents a unit of work for annotation:</p> <pre><code>task = Task(\n    task_id=\"906591\",\n    name=\"Batch 1\",\n    url=\"https://app.cvat.ai/api/jobs/520016\"\n)\n</code></pre>"},{"location":"#jobstatus","title":"JobStatus","text":"<p>The <code>JobStatus</code> class tracks the status of annotation jobs:</p> <pre><code># Create from job status data\nstatus = JobStatus(\n    task_id=\"906591\",\n    job_id=520016,\n    task_name=\"Batch 1\",\n    stage=\"annotation\",\n    state=\"completed\",\n    assignee=\"john.doe\"\n)\n\n# Create from CVAT SDK job object\nstatus = JobStatus.from_job(job, task_name=\"Batch 1\")\nprint(status.assignee_email)  # Get assignee's email\n</code></pre>"},{"location":"#imageannotation","title":"ImageAnnotation","text":"<p>The <code>ImageAnnotation</code> class represents annotations for a single image:</p> <pre><code>image = ImageAnnotation(\n    id=\"1\",\n    name=\"frame_000001.jpg\",\n    subset=\"train\",\n    task_id=\"906591\",\n    width=1920,\n    height=1080,\n    boxes=[\n        Box(label=\"car\", xtl=100, ytl=200, xbr=300, ybr=400)\n    ],\n    masks=[\n        Mask(label=\"person\", points=\"100,200;300,400\", z_order=1)\n    ]\n)\n</code></pre>"},{"location":"#box","title":"Box","text":"<p>The <code>Box</code> class represents a bounding box annotation:</p> <pre><code># Simple box\nbox = Box(\n    label=\"car\",\n    xtl=100,\n    ytl=200,\n    xbr=300,\n    ybr=400,\n    occluded=False,\n    z_order=1\n)\n\n# Box with attributes\nbox_with_attrs = Box(\n    label=\"car\",\n    xtl=100,\n    ytl=200,\n    xbr=300,\n    ybr=400,\n    attributes=[\n        Attribute(name=\"color\", value=\"red\"),\n        Attribute(name=\"model\", value=\"sedan\")\n    ]\n)\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"api/annotations/","title":"Annotations","text":"<p>The <code>Annotations</code> class provides functionality to load, save and query CVAT annotations.</p>"},{"location":"api/annotations/#features","title":"Features","text":"<ul> <li>Load and save CVAT XML annotation files</li> <li>Track job status information</li> <li>Query task completion status</li> <li>Access image annotations</li> </ul>"},{"location":"api/annotations/#usage","title":"Usage","text":""},{"location":"api/annotations/#loading-annotations","title":"Loading Annotations","text":"<pre><code># Load annotations from XML file\nannotations = Annotations.from_path(\"annotations.xml\")\n\n# Load annotations with job status\nannotations = Annotations.from_path(\n    \"annotations.xml\",\n    \"job_status.json\"\n)\n</code></pre>"},{"location":"api/annotations/#querying-tasks-and-images","title":"Querying Tasks and Images","text":"<pre><code># Get completed tasks and their images\ncompleted_tasks = annotations.get_completed_tasks()\ncompleted_images = annotations.get_images_from_completed_tasks()\n\n# Get task status\ntask_status = annotations.get_task_status(\"1234\")\n# Returns: {\"5678\": \"completed\", \"5679\": \"in_progress\"}\n</code></pre>"},{"location":"api/annotations/#creating-cvat-links","title":"Creating CVAT Links","text":"<pre><code># Create CVAT link for an image\nlink = annotations.create_cvat_link(\"image1.jpg\")\n# Returns: \"https://app.cvat.ai/tasks/453747/jobs/520016\"\n</code></pre>"},{"location":"api/annotations/#api-reference","title":"API Reference","text":""},{"location":"api/annotations/#properties","title":"Properties","text":"<ul> <li><code>version: str</code> - Version of the CVAT annotations format</li> <li><code>project: Project</code> - Project metadata and labels</li> <li><code>tasks: List[Task]</code> - List of tasks in the project</li> <li><code>images: List[ImageAnnotation]</code> - List of image annotations</li> <li><code>job_status: List[JobStatus]</code> - List of job status information</li> </ul>"},{"location":"api/annotations/#methods","title":"Methods","text":""},{"location":"api/annotations/#from_path","title":"from_path","text":"<pre><code>@classmethod\ndef from_path(\n    cls,\n    xml_annotation_path: Union[str, Path],\n    job_status_path: Optional[Union[str, Path]] = None\n) -&gt; Annotations\n</code></pre> <p>Load annotations from XML file and optionally include job status information.</p>"},{"location":"api/annotations/#get_task_status","title":"get_task_status","text":"<pre><code>def get_task_status(self, task_id: str) -&gt; Dict[str, str]\n</code></pre> <p>Get the status of all jobs for a given task. Returns a dictionary mapping job IDs to their states.</p>"},{"location":"api/annotations/#get_completed_tasks","title":"get_completed_tasks","text":"<pre><code>def get_completed_tasks(self) -&gt; List[Task]\n</code></pre> <p>Get all tasks that have all jobs completed. A task is considered completed when all of its jobs are in the \"completed\" state.</p>"},{"location":"api/annotations/#get_completed_task_ids","title":"get_completed_task_ids","text":"<pre><code>def get_completed_task_ids(self) -&gt; List[str]\n</code></pre> <p>Get IDs of all tasks that have all jobs completed.</p>"},{"location":"api/annotations/#get_images_from_completed_tasks","title":"get_images_from_completed_tasks","text":"<pre><code>def get_images_from_completed_tasks(self) -&gt; List[ImageAnnotation]\n</code></pre> <p>Get all images from completed tasks.</p>"},{"location":"api/annotations/#create_cvat_link","title":"create_cvat_link","text":"<pre><code>def create_cvat_link(self, image_name: str) -&gt; str\n</code></pre> <p>Create a CVAT link for the given image name. Returns a link in the format: <code>https://app.cvat.ai/tasks/{task_id}/jobs/{job_id}</code></p>"},{"location":"api/client/","title":"Client","text":"<p>The <code>Client</code> class is the main entry point for interacting with CVAT through next-cvat.</p>"},{"location":"api/client/#features","title":"Features","text":"<ul> <li>Initialize CVAT client from environment variables or credentials</li> <li>Access and manage projects, tasks, and jobs</li> <li>Download project data and annotations</li> <li>Upload annotations and frames</li> <li>Track job status</li> </ul>"},{"location":"api/client/#usage","title":"Usage","text":""},{"location":"api/client/#initialization","title":"Initialization","text":"<pre><code>from next_cvat import Client\n\n# Initialize from environment file\nclient = Client.from_env_file(\".env.cvat.secrets\")\n\n# Initialize with credentials\nclient = Client(\n    server_address=\"https://app.cvat.ai\",\n    username=\"user@example.com\",\n    password=\"password\"\n)\n</code></pre>"},{"location":"api/client/#working-with-projects","title":"Working with Projects","text":"<pre><code># Get a project by ID\nproject = client.project(217969)\n\n# Download project data\nproject.download_(\"dataset/\")\n\n# Get project tasks\ntasks = project.tasks()\nfor task in tasks:\n    print(f\"Task {task.id}: {task.name}\")\n</code></pre>"},{"location":"api/client/#working-with-tasks","title":"Working with Tasks","text":"<pre><code># Get a task by ID\ntask = client.task(906591)\n\n# Create a new task\ntask = client.create_task(\n    name=\"New Task\",\n    project_id=217969,\n    frame_paths=[\"image1.jpg\", \"image2.jpg\"]\n)\n\n# Delete a frame from a task\ntask.delete_frame(\"image1.jpg\")\n</code></pre>"},{"location":"api/client/#working-with-jobs","title":"Working with Jobs","text":"<pre><code># Get a job by ID\njob = client.job(520016)\n\n# Get job annotations\nannotations = job.annotations()\n\n# Update job status\njob.update_status(\"completed\")\n</code></pre>"},{"location":"api/client/#api-reference","title":"API Reference","text":""},{"location":"api/client/#properties","title":"Properties","text":"<ul> <li><code>server_address: str</code> - CVAT server URL</li> <li><code>username: str</code> - Username for authentication</li> <li><code>password: str</code> - Password for authentication</li> </ul>"},{"location":"api/client/#methods","title":"Methods","text":""},{"location":"api/client/#from_env_file","title":"from_env_file","text":"<pre><code>@classmethod\ndef from_env_file(cls, env_file: Union[str, Path]) -&gt; Client\n</code></pre> <p>Initialize client from environment file containing CVAT credentials.</p>"},{"location":"api/client/#project","title":"project","text":"<pre><code>def project(self, project_id: int) -&gt; Project\n</code></pre> <p>Get a project by ID.</p>"},{"location":"api/client/#task","title":"task","text":"<pre><code>def task(self, task_id: int) -&gt; Task\n</code></pre> <p>Get a task by ID.</p>"},{"location":"api/client/#job","title":"job","text":"<pre><code>def job(self, job_id: int) -&gt; Job\n</code></pre> <p>Get a job by ID.</p>"},{"location":"api/client/#create_task","title":"create_task","text":"<pre><code>def create_task(\n    self,\n    name: str,\n    project_id: int,\n    frame_paths: List[Union[str, Path]],\n    **kwargs\n) -&gt; Task\n</code></pre> <p>Create a new task in a project with the given frames.</p>"},{"location":"api/client/#create_token","title":"create_token","text":"<pre><code>def create_token(self) -&gt; str\n</code></pre> <p>Create a new authentication token for the current user.</p>"},{"location":"api/frame/","title":"Frame","text":"<p>The <code>Frame</code> class represents a frame in a CVAT task and provides methods for accessing frame data and images.</p> <p>handler: python options: show_root_heading: true show_source: true</p>"},{"location":"api/frame/#next_cvat.client.frame.Frame","title":"<code>next_cvat.client.frame.Frame</code>","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"api/frame/#next_cvat.client.frame.Frame-attributes","title":"Attributes","text":""},{"location":"api/frame/#next_cvat.client.frame.Frame.task","title":"<code>next_cvat.client.frame.Frame.task: Task</code>  <code>instance-attribute</code>","text":""},{"location":"api/frame/#next_cvat.client.frame.Frame.id","title":"<code>next_cvat.client.frame.Frame.id: int</code>  <code>instance-attribute</code>","text":""},{"location":"api/frame/#next_cvat.client.frame.Frame.frame_info","title":"<code>next_cvat.client.frame.Frame.frame_info: models.IFrameMeta</code>  <code>instance-attribute</code>","text":""},{"location":"api/frame/#next_cvat.client.frame.Frame.cvat","title":"<code>next_cvat.client.frame.Frame.cvat: models.IFrameMeta</code>  <code>property</code>","text":""},{"location":"api/frame/#next_cvat.client.frame.Frame-functions","title":"Functions","text":""},{"location":"api/frame/#next_cvat.client.frame.Frame.pil_image","title":"<code>next_cvat.client.frame.Frame.pil_image()</code>","text":"Source code in <code>next_cvat/client/frame.py</code> <pre><code>def pil_image(self) -&gt; Image.Image:\n    with self.task.cvat() as cvat_task:\n        frame_bytes = cvat_task.get_frame(self.id)\n        return Image.open(frame_bytes)\n</code></pre>"},{"location":"api/job/","title":"Job Status","text":"<p>The <code>JobStatus</code> class tracks the status of annotation jobs in CVAT.</p>"},{"location":"api/job/#properties","title":"Properties","text":"<ul> <li><code>task_id: str</code> - ID of the task this job belongs to</li> <li><code>job_id: int</code> - Unique identifier for the job</li> <li><code>task_name: str</code> - Name of the parent task</li> <li><code>stage: str</code> - Current stage of the job (e.g., \"annotation\", \"validation\")</li> <li><code>state: str</code> - Current state of the job (e.g., \"completed\", \"in_progress\")</li> <li><code>assignee: Optional[Union[str, Dict[str, Any]]]</code> - Username or details of the person assigned to the job</li> </ul>"},{"location":"api/job/#usage","title":"Usage","text":""},{"location":"api/job/#creating-from-job-status-data","title":"Creating from Job Status Data","text":"<pre><code>status = JobStatus(\n    task_id=\"906591\",\n    job_id=520016,\n    task_name=\"Batch 1\",\n    stage=\"annotation\",\n    state=\"completed\",\n    assignee=\"john.doe\"\n)\n</code></pre>"},{"location":"api/job/#creating-from-cvat-sdk-job-object","title":"Creating from CVAT SDK Job Object","text":"<pre><code>status = JobStatus.from_job(job, task_name=\"Batch 1\")\nprint(status.assignee_email)  # Get assignee's email\n</code></pre>"},{"location":"api/job/#methods","title":"Methods","text":""},{"location":"api/job/#from_job","title":"from_job","text":"<pre><code>@classmethod\ndef from_job(cls, job, task_name: str) -&gt; JobStatus\n</code></pre> <p>Create a JobStatus from a CVAT SDK job object.</p>"},{"location":"api/job/#assignee_email","title":"assignee_email","text":"<pre><code>@property\ndef assignee_email(self) -&gt; Optional[str]\n</code></pre> <p>Get the assignee's email if available. Returns the username from the assignee dictionary or the assignee string directly.</p>"},{"location":"api/job_annotations/","title":"JobAnnotations","text":"<p>The <code>JobAnnotations</code> class represents annotations for a CVAT job and provides methods for managing annotation data.</p> <p>handler: python options: show_root_heading: true show_source: true</p>"},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations","title":"<code>next_cvat.client.job_annotations.JobAnnotations</code>","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations-attributes","title":"Attributes","text":""},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations.job","title":"<code>next_cvat.client.job_annotations.JobAnnotations.job: Job</code>  <code>instance-attribute</code>","text":""},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations.annotations","title":"<code>next_cvat.client.job_annotations.JobAnnotations.annotations: dict</code>  <code>instance-attribute</code>","text":""},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations-functions","title":"Functions","text":""},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations.add_mask_","title":"<code>next_cvat.client.job_annotations.JobAnnotations.add_mask_(mask, image_name, group=0)</code>","text":"Source code in <code>next_cvat/client/job_annotations.py</code> <pre><code>def add_mask_(\n    self,\n    mask: next_cvat.Mask,\n    image_name: str,\n    group: int = 0,\n) -&gt; JobAnnotations:\n    label = self.job.task.project.label(name=mask.label)\n\n    frame = self.job.task.frame(image_name=image_name)\n\n    self.annotations[\"shapes\"].append(\n        mask.request(\n            frame=frame.id,\n            label_id=label.id,\n            group=group,\n        )\n    )\n\n    return self\n</code></pre>"},{"location":"api/job_annotations/#next_cvat.client.job_annotations.JobAnnotations.request","title":"<code>next_cvat.client.job_annotations.JobAnnotations.request()</code>","text":"Source code in <code>next_cvat/client/job_annotations.py</code> <pre><code>def request(self) -&gt; models.LabeledDataRequest:\n    request = models.LabeledDataRequest()\n    request.version = self.annotations[\"version\"]\n    request.tags = self.annotations[\"tags\"]\n    request.shapes = self.annotations[\"shapes\"]\n    request.tracks = self.annotations[\"tracks\"]\n    return request\n</code></pre>"},{"location":"api/project/","title":"Project","text":"<p>The <code>Project</code> class represents a CVAT project containing tasks and labels.</p>"},{"location":"api/project/#properties","title":"Properties","text":"<ul> <li><code>id: str</code> - Unique identifier for the project</li> <li><code>name: str</code> - Human-readable name of the project</li> <li><code>created: str</code> - Timestamp when the project was created</li> <li><code>updated: str</code> - Timestamp when the project was last updated</li> <li><code>labels: List[Label]</code> - List of label definitions for the project</li> </ul>"},{"location":"api/project/#usage","title":"Usage","text":"<pre><code>project = Project(\n    id=\"217969\",\n    name=\"My Project\",\n    created=\"2024-01-01 12:00:00.000000+00:00\",\n    updated=\"2024-01-01 12:00:00.000000+00:00\",\n    labels=[\n        Label(name=\"car\", color=\"#ff0000\", type=\"any\"),\n        Label(name=\"person\", color=\"#00ff00\", type=\"any\")\n    ]\n)\n</code></pre>"},{"location":"api/task/","title":"Task","text":"<p>The <code>Task</code> class represents a unit of work for annotation in CVAT.</p>"},{"location":"api/task/#properties","title":"Properties","text":"<ul> <li><code>task_id: str</code> - Unique identifier for the task</li> <li><code>name: str</code> - Human-readable name of the task</li> <li><code>url: Optional[str]</code> - Optional URL to access the task's data or API endpoint</li> </ul>"},{"location":"api/task/#usage","title":"Usage","text":"<pre><code>task = Task(\n    task_id=\"906591\",\n    name=\"Batch 1\",\n    url=\"https://app.cvat.ai/api/jobs/520016\"\n)\n</code></pre>"},{"location":"api/task/#methods","title":"Methods","text":""},{"location":"api/task/#job_id","title":"job_id","text":"<pre><code>def job_id(self) -&gt; str\n</code></pre> <p>Extracts the job ID from the task's URL. Assumes the job ID is the last numeric part of the URL.</p>"},{"location":"examples/basic_usage/","title":"Examples","text":"<p>This guide shows you how to use next-cvat for common tasks.</p>"},{"location":"examples/basic_usage/#authentication","title":"Authentication","text":"<p>Create a <code>.env.cvat.secrets</code> file with your CVAT credentials:</p> <p>```bash skip CVAT_HOST=https://app.cvat.ai CVAT_USERNAME=your_username CVAT_PASSWORD=your_password</p> <pre><code>\n## Basic Workflow\n\nHere's a complete example showing the main features:\n\n```python skip\nfrom next_cvat import Client\nfrom pathlib import Path\n\n# Initialize client\nclient = Client.from_env_file(\".env.cvat.secrets\")\n\n# Get a project\nproject = client.project(217969)  # Use test project\n\n# Create a new task\ntask = project.create_task_(\n    name=\"Test Task\",\n    image_quality=70\n)\n\ntry:\n    # Upload images (replace with your actual image paths)\n    task.upload_images_(\n        image_paths=[\"path/to/image1.jpg\", \"path/to/image2.jpg\"],\n        image_quality=70\n    )\n\n    # Get task jobs\n    jobs = task.jobs()\n    job = jobs[0]  # Get first job\n\n    # Get and update annotations\n    annotations = job.annotations()\n\n    # Add a bounding box annotation\n    new_annotations = {\n        \"version\": 0,\n        \"tags\": [],\n        \"shapes\": [{\n            \"type\": \"rectangle\",\n            \"points\": [40, 40, 60, 60],\n            \"frame\": 0,\n            \"label_id\": project.labels()[0].id,\n            \"group\": 0,\n            \"source\": \"manual\",\n            \"attributes\": []\n        }],\n        \"tracks\": []\n    }\n    job.update_annotations_(new_annotations)\n\n    # Check job status\n    print(f\"Job state: {job.state()}\")\n    print(f\"Job stage: {job.stage()}\")\n\nfinally:\n    # Clean up\n    project.delete_task_(task.id)\n</code></pre>"},{"location":"examples/basic_usage/#working-with-projects","title":"Working with Projects","text":"<p>```python skip</p>"},{"location":"examples/basic_usage/#get-project-metadata","title":"Get project metadata","text":"<p>project = client.project(217969) with project.cvat() as cvat_project:     print(f\"Project name: {cvat_project.name}\")     print(f\"Created: {cvat_project.created_date}\")</p>"},{"location":"examples/basic_usage/#list-tasks-in-project","title":"List tasks in project","text":"<p>tasks = project.tasks() for task in tasks:     print(f\"Task {task.id}: {task.name}\")</p> <pre><code>\n## Working with Tasks\n\n```python skip\n# Get a specific task\ntask = client.task(906591)\n\n# List frames in task\nframes = task.frames()\nprint(f\"Number of frames: {len(frames)}\")\n\n# Delete a frame\ntask.delete_frame_(0)  # Delete first frame\n</code></pre>"},{"location":"examples/basic_usage/#working-with-jobs","title":"Working with Jobs","text":"<p>```python skip</p>"},{"location":"examples/basic_usage/#get-a-specific-job","title":"Get a specific job","text":"<p>job = client.job(520016)</p>"},{"location":"examples/basic_usage/#update-job-status","title":"Update job status","text":"<p>job.update_status(\"completed\")</p>"},{"location":"examples/basic_usage/#get-job-annotations","title":"Get job annotations","text":"<p>annotations = job.annotations() print(f\"Number of shapes: {len(annotations.annotations['shapes'])}\") ```</p> <p>Note: The code examples above are for illustration purposes. Replace the IDs and file paths with your actual values.</p>"}]}